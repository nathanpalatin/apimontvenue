// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(uuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user Users @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         Users    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Users {
  id            String         @id @default(uuid())
  name          String
  email         String         @unique
  emailVerified DateTime?
  password      String
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  avatar        String?
  phone         String
  username      String         @unique
  accounts      Account[]
  sessions      Session[]
  Transactions  Transactions[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Products {
  id          String  @id @default(uuid())
  title       String
  slug        String  @unique
  price       Float
  image       String
  description String
  featured    Boolean
  session_id  String
}

model Transactions {
  id         String   @id @default(uuid())
  title      String
  userId     String
  session_id String
  amount     Float
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  type       String

  user Users @relation(fields: [userId], references: [id])
}
