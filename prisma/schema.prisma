generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Users {
  id            String         @id @default(uuid())
  name          String
  email         String         @unique
  intId         Int            @default(0)
  emailVerified Boolean        @default(false)
  password      String
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  avatar        String?
  phone         String
  username      String         @unique
  Transactions  Transactions[]
  Products      Products[]
  Posts         Posts[]
  Medias        Medias[]
  Followers     Followers[]
  Chats         Chats[]

  @@map("users")
}

model Products {
  id          String  @id @default(uuid())
  title       String
  slug        String  @unique
  price       Float
  image       String
  description String
  featured    Boolean
  userId      String

  user Users @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("products")
}

model Transactions {
  id        String   @id @default(uuid())
  title     String
  userId    String
  amount    Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  type      String

  user Users @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("transactions")
}

model Posts {
  id        String   @id @default(uuid())
  title     String
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String

  user Users @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("posts")
}

model Medias {
  id     String @id @default(uuid())
  type   String @default("FILE")
  source String
  userId String

  user Users @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("medias")
}

model Followers {
  id          String @id @default(uuid())
  userId      Int    @default(0)
  followingId Int    @default(0)

  referenceId String?

  Users Users? @relation(fields: [referenceId], references: [id], onDelete: Cascade)

  @@map("followers")
}

model Chats {
  id         String   @id @default(uuid())
  userId     Int      @default(0)
  chatWithId Int      @default(0)
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")

  referenceId String?

  Users Users? @relation(fields: [referenceId], references: [id], onDelete: Cascade)

  @@map("chats")
}
